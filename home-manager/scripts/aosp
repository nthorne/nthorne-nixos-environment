# vim: filetype=sh

# Set IFS explicitly to space-tab-newline to avoid tampering
IFS=' 	
'


NAME=
# Make sure that we're not on NixOS; if so, avoid tampering with PATH
if [[ -f /etc/os-release ]]
then
  . /etc/os-release
fi

if [[ "NixOS" != "$NAME" ]]
then
  # If found, use getconf to constructing a reasonable PATH, otherwise
  # we set it manually.
  if [[ -x /usr/bin/getconf ]]
  then
    PATH=$(/usr/bin/getconf PATH)
  else
    PATH=/bin:/usr/bin:/usr/local/bin
  fi
fi


ACTION=
PROJECT=
TARGET=
REPO_PATH=
MAKE_TARGET=${MAKE_TARGET:="droid flashfiles"}
# NOTE: I've re-tagged the nexus image here for convenience.
SEM25_IMAGE="sem25_dev"


function usage()
{
  cat <<Usage_Heredoc
Usage: $(basename $0) <ACTION> [PROJECT] [TARGET] [OPTIONS]

Execute ACTION on PROJECT. Unless specified, default TARGET for the
specified project will be used.

Where valid ACTIONS are:
  build   make the PROJECT flashfiles
  flash   flash the PROJECT
  shell   open a shell in the build container

Where valid OPTIONS are:
  -h, --help  display usage

Environment variables:
  MAKE_TARGET  Make target to issue when building (default: droid flashfiles)

Usage_Heredoc
}

function error()
{
  echo "Error: $@" >&2
  exit 1
}

function parse_options()
{
  while (($#))
  do
    case $1 in
      -h|--help)
        usage
        exit 0
        ;;
      *)
        if [[ -z "$ACTION" ]]
        then
          ACTION=$1
        elif [[ -z "$PROJECT" ]]
        then
          PROJECT=$1
        elif [[ -z "$TARGET" ]]
        then
          TARGET=$1
        else
          error "Unknown option: $1. Try $(basename $0) -h for options."
        fi
        ;;
    esac

    shift
  done

  # Validate input
  test -n "$ACTION" || error "Missing ACTION. Try $(basename $0) -h for options."

  if [[ -z "$PROJECT" ]]
  then
    PROJECT=$(basename ${PWD})
  fi

  REPO_PATH="/home/nthorne/work/$PROJECT"
  test -d "$REPO_PATH" || error "$REPO_PATH: No such folder."

  SEM25_OUT="$REPO_PATH-out"
}

function prepare_build()
{
  if [[ -z "$TARGET" ]]
  then
    if [[ "$PROJECT" =~ ihu.* ]]
    then
      TARGET=ihu_kraken-eng
    elif [[ "$PROJECT" =~ sem-2.5.* ]]
    then
      TARGET=mermaid-fastboot
      if [[ "$MAKE_TARGET" =~ droid.* ]]
      then
        MAKE_TARGET="$TARGET"
      fi
      test -d "$SEM25_OUT" || mkdir -p "$SEM25_OUT"
    elif [[ "$PROJECT" =~ sem.* ]]
    then
      TARGET=gtt_hydra-eng
    else
      error "$PROJECT: Unknown project type."
    fi
  fi
}

function prepare_flash()
{
  prepare_build
}

function prepare_shell()
{
  if [[ "$PROJECT" =~ sem-2.5.* ]]
  then
    test -d "$SEM25_OUT" || mkdir -p "$SEM25_OUT"
  fi
}

function do_build()
{
  if [[ "$PROJECT" =~ sem-2.5.* ]]
  then
    docker run \
      --rm \
      -v $REPO_PATH:/home/sembuilder/workspace \
      -v /home/nthorne/.ccache/:/opt/ccache \
      -v $REPO_PATH-out:/tmp \
      -v /home/nthorne/work/tools:/pkg \
      --privileged -v /dev/bus/usb:/dev/bus/usb \
      -e PUID=$(id -u) \
      -e PGID=$(id -g) \
      -e CCACHE_DIR=/opt/ccache \
      -e USE_CCACHE=1 \
      -e CCACHE_EXEC=/usr/local/bin/ccache \
      -e CCACHE_FILECLONE=1 \
      --hostname=bob \
      "$SEM25_IMAGE" \
      /bin/bash -c "nice ./buildtarget -f -j 10"
  else
    docker run \
      --rm \
      -v $REPO_PATH:/home/aosp_builder/aosp_src \
      -v /home/nthorne/.ccache/:/opt/ccache \
      -e PUID=$(id -u) \
      -e PGID=$(id -g) \
      -e CCACHE_DIR=/opt/ccache \
      -e USE_CCACHE=1 \
      -e CCACHE_EXEC=/usr/local/bin/ccache \
      -e CCACHE_FILECLONE=1 \
      --hostname=bob \
      x86_64-aosp-r \
      /usr/bin/nice /bin/bash -c "source build/envsetup.sh && \
        lunch $TARGET && \
        m -j $MAKE_TARGET"
  fi
}

function do_flash()
{
  if [[ "$PROJECT" =~ sem-2.5.* ]]
  then
    docker run \
      --rm \
      -v $REPO_PATH:/home/sembuilder/workspace \
      -v /home/nthorne/.ccache/:/opt/ccache \
      -v $REPO_PATH-out:/tmp \
      -v /home/nthorne/work/tools:/pkg \
      --privileged -v /dev/bus/usb:/dev/bus/usb \
      -e PUID=$(id -u) \
      -e PGID=$(id -g) \
      -e CCACHE_DIR=/opt/ccache \
      -e USE_CCACHE=1 \
      -e CCACHE_EXEC=/usr/local/bin/ccache \
      -e CCACHE_FILECLONE=1 \
      --hostname=bob \
      -ti \
      "$SEM25_IMAGE" \
      /bin/bash -c "cd apps/LINUX/android && \
        source build/envsetup.sh && \
        lunch mermaid-userdebug && \
        cd /tmp/fastboot* && \
        bash ./fastboot_cmds"
  else
    docker run \
      --rm \
      -v $REPO_PATH:/home/aosp_builder/aosp_src \
      -v /home/nthorne/.ccache/:/opt/ccache \
      --privileged -v /dev/bus/usb:/dev/bus/usb \
      -e PUID=$(id -u) \
      -e PGID=$(id -g) \
      -e CCACHE_DIR=/opt/ccache \
      -e USE_CCACHE=1 \
      -e CCACHE_EXEC=/usr/local/bin/ccache \
      -e CCACHE_FILECLONE=1 \
      --hostname=bob \
      x86_64-aosp-r \
      /bin/bash -c "source build/envsetup.sh && \
        lunch $TARGET && \
        mkdir /tmp/flashing && \
        unzip -d /tmp/flashing \$ANDROID_PRODUCT_OUT/\$TARGET_PRODUCT-flashfiles-\$TARGET_BUILD_VARIANT.\$(whoami).zip && \
        cd /tmp/flashing && \
        ./fastboot.sh --abl --disable-verity"

  fi
}

function do_shell()
{
  echo "$PROJECT"
  if [[ "$PROJECT" =~ sem-2.5.* ]]
  then
    docker run \
      --rm \
      -v $REPO_PATH:/home/sembuilder/workspace \
      -v /home/nthorne/.ccache/:/opt/ccache \
      -v $REPO_PATH-out:/tmp \
      -v /home/nthorne/work/tools:/pkg \
      -v /home/nthorne/tmp/:/home/sembuilder/tmp \
      --privileged -v /dev/bus/usb:/dev/bus/usb \
      -e PUID=$(id -u) \
      -e PGID=$(id -g) \
      -e CCACHE_DIR=/opt/ccache \
      -e USE_CCACHE=1 \
      -e CCACHE_EXEC=/usr/local/bin/ccache \
      -e CCACHE_FILECLONE=1 \
      --hostname=bob \
      -ti \
      "$SEM25_IMAGE" \
      /bin/bash
  else
    docker run \
      --rm \
      -v $REPO_PATH:/home/aosp_builder/aosp_src \
      -v /home/nthorne/.ccache/:/opt/ccache \
      -v /home/nthorne/tmp/:/home/aosp_builder/tmp \
      --privileged -v /dev/bus/usb:/dev/bus/usb \
      -e PUID=$(id -u) \
      -e PGID=$(id -g) \
      -e CCACHE_DIR=/opt/ccache \
      -e USE_CCACHE=1 \
      -e CCACHE_EXEC=/usr/local/bin/ccache \
      -e CCACHE_FILECLONE=1 \
      --hostname=bob \
      -ti \
      x86_64-aosp-r \
      /bin/bash
  fi
}

parse_options "$@"

prepare_"$ACTION"

# Dump the environment
(set -o posix; set)

do_"$ACTION"
